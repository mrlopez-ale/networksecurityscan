Network Security Monitor Documentation
This document describes the Python code for a network security monitoring system. This system is designed to monitor a network for potential security threats and vulnerabilities using a combination of tools, including Nmap, Nessus, and Snort.

1. Overview
The script implements a multi-threaded network security monitor. It performs the following main tasks:

Nmap Scanning: Discovers new devices on the network and performs port and OS identification scans.

Nessus Scanning: Performs vulnerability scans on the network.

Traffic Capture: Captures network traffic using Tshark.

Intrusion Detection: Analyzes network traffic for potential intrusions using Snort.

Network Usage Monitoring: Monitors network traffic for unusual spikes.

Reporting: Generates daily reports.

The system is designed to run continuously, monitoring the network in real-time.

2. File Structure
network_security_monitor.py: The main Python script.

./security_reports/: (Automatically created) A directory where scan results, captured traffic, and reports are stored.

3. Modules
The script uses the following Python modules:

os: For interacting with the operating system (e.g., creating directories, file paths).

subprocess: For running external commands (Nmap, Nessus, Tshark, Snort).

json: For handling JSON data (Nessus reports).

time: For handling time-related operations (pausing execution, scheduling tasks).

threading: For running tasks concurrently in separate threads.

psutil: For monitoring network usage.

scapy.all: For sniffing network traffic.

4. Configuration
The script uses the following configuration variables:

TARGET_IP: The target network IP address range to scan (e.g., "192.168.1.1/24").

NESSUS_URL: The URL of the Nessus server.

NESSUS_API_KEY: The API key for authenticating with the Nessus server.

SNORT_RULES_PATH: The path to the Snort ruleset.

OUTPUT_DIR: The directory where reports and captured traffic are saved.

NMAP_SCAN_INTERVAL: The interval (in seconds) for running Nmap scans on new connections.

NESSUS_SCAN_INTERVAL: The interval (in seconds) for running Nessus scans.

TRAFFIC_SPIKE_THRESHOLD: The threshold for triggering traffic capture.

5. Functions
5.1. run_nmap_scan(target_ip)
Runs an Nmap scan on the specified target IP address.

Parameters:

target_ip (str): The IP address to scan.

Returns:

None

5.2. run_nessus_scan()
Runs a Nessus vulnerability scan.

Parameters:

None

Returns:

None

5.3. capture_traffic(interface="eth0")
Captures network traffic using Tshark.

Parameters:

interface (str, optional): The network interface to capture traffic from (default: "eth0").

Returns:

None

5.4. analyze_with_snort()
Runs Snort to analyze captured network traffic for intrusions.

Parameters:

None

Returns:

None

5.5. monitor_connections()
Monitors the network for new IP addresses using arp -a. When a new IP is detected, it runs an Nmap scan on that IP.

Parameters:

None

Returns:

None

5.6. monitor_network_usage(interface="eth0")
Monitors network traffic for spikes, and captures traffic if a spike is detected

Parameters:

interface (str): the network interface to monitor

Returns:

None

5.7. monitor_snort_alerts()
Monitors network traffic and analyzes it with Snort in real time.

Parameters:

None

Returns:

None

5.8. run_nessus_periodically()
Runs a Nessus scan in a loop at a specified interval.

Parameters:

None

Returns:

None

5.9. generate_daily_report()
Generates a daily report containing the output from the various security tools.

Parameters:

None

Returns:

None

5.10. main()
The main function that:

Creates the output directory.

Starts the monitoring threads.

Enters an infinite loop to keep the program running.

Parameters:

None

Returns:

None

6. Security Considerations
Nessus API Key: The script stores the Nessus API key in plain text. This should be handled more securely (e.g., using environment variables or a configuration file with restricted permissions).

Root Privileges: The script requires root privileges to run Nmap, Tshark, and Snort. This increases the risk if the script is compromised.

Snort Rules: The effectiveness of Snort depends on the quality and up-to-dateness of the Snort rules.

Error Handling: The script uses subprocess.run(..., check=True), which will raise an exception if a command fails. More robust error handling could be implemented.

Resource Usage: The script could consume significant system resources (CPU, disk space) due to the continuous scanning and traffic capture. Consider adding options to configure the scan intervals and capture durations.

7. Dependencies
The script has the following dependencies:

Python 3.x

Nmap

Nessus

Snort

Tshark (Wireshark)

psutil

scapy

8. Limitations
The script performs active scanning, which could be detected by network devices and trigger security alerts.

The script captures all network traffic, which could generate large amounts of data. Consider adding filters to Tshark to capture only relevant traffic.

The script assumes a relatively simple network setup. It may need to be modified to work in more complex environments.

The script relies on external tools (Nmap, Nessus, Snort, Tshark). Ensure that these tools are properly installed and configured.
